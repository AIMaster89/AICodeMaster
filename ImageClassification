import json
import boto3
import botocore.config

def lambda_handler(event, context):
    
    try:
        print("Event ", event)
        #event=json.loads(event['body'])
        llmInput=event['image']
        generated_response=generate_using_bedrock(llmInput=llmInput)
        print("Generated Response", generated_response)
        return{
            'statusCode':200,
            'responseDto':json.loads(generated_response)
        }
    except Exception as ex:
        print("Error in the main method response:",ex)
        return{
            'statusCode':400,
            'errorMessage':"Model did not respond on time, please try after sometime or search with a different input."
        }
    
def generate_using_bedrock(llmInput):
    
    print(f"bedrock method entered")
    bedrock_runtime_client = boto3.client(
            'bedrock-runtime',
            aws_access_key_id='', 
            aws_secret_access_key='',
            region_name='ap-south-1')
			
    prompt="\n\nHuman:Are there any dents, cracks , corrosion,battery corrosion, break pad worn out, brake broken or any other form of damage in the image that I sent.Identify two things. One is the input vehicle part image and the other is type of problem in the image and give the ouput response as a proper formatted json object only  with  two fields with keys as vehiclePart, problem. The value in first field should contain the identified vehilce part name of input image and the value in second field should contain the identified problem.Response should contain json object alone and please don't send any extra data in response. Incase if the image is not identifiable or blurred, then send the response in same json format with same keys and values as NA and Image not clear.\n\nAssistant:" 
   
    payload = {
        "messages": [
            {
                "role": "user",
                "content": [
                    {
                        "type": "image",
                        "source": {
                            "type": "base64",
                            "media_type": "image/jpeg",
                            "data": llmInput
                        }
                    },
                    {
                        "type": "text",
                        "text": prompt
                    }
                ]
            }
        ],
        "max_tokens": 100,
        "anthropic_version": "bedrock-2023-05-31"
    }   

    try:
        modelId = 'anthropic.claude-3-haiku-20240307-v1:0'
        accept = 'application/json'
        contentType = 'application/json'
        print(f"bedrock method entered-1")
        response = bedrock_runtime_client.invoke_model(body=json.dumps(payload), modelId=modelId, accept=accept, contentType=contentType)
        print(f"bedrock method entered-2", response)
        response_body = json.loads(response.get('body').read())
        resp=response_body['content'][0]['text']
        print(f"response::", resp)
        return resp
    except Exception as ex:
        print(f"Error generating the response:{ex}")
        return "Exception occured"
